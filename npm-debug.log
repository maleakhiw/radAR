0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/nodejs', '/usr/bin/npm', 'install', '-g', 'cloc' ]
2 info using npm@1.3.10
3 info using node@v0.10.25
4 verbose cache add [ 'cloc', null ]
5 verbose cache add name=undefined spec="cloc" args=["cloc",null]
6 verbose parsed url { protocol: null,
6 verbose parsed url   slashes: null,
6 verbose parsed url   auth: null,
6 verbose parsed url   host: null,
6 verbose parsed url   port: null,
6 verbose parsed url   hostname: null,
6 verbose parsed url   hash: null,
6 verbose parsed url   search: null,
6 verbose parsed url   query: null,
6 verbose parsed url   pathname: 'cloc',
6 verbose parsed url   path: 'cloc',
6 verbose parsed url   href: 'cloc' }
7 silly lockFile 87ff1676-cloc cloc
8 verbose lock cloc /home/nightietime/.npm/87ff1676-cloc.lock
9 silly lockFile 87ff1676-cloc cloc
10 silly lockFile 87ff1676-cloc cloc
11 verbose addNamed [ 'cloc', '' ]
12 verbose addNamed [ null, '*' ]
13 silly lockFile bc15718c-cloc cloc@
14 verbose lock cloc@ /home/nightietime/.npm/bc15718c-cloc.lock
15 silly addNameRange { name: 'cloc', range: '*', hasData: false }
16 verbose url raw cloc
17 verbose url resolving [ 'https://registry.npmjs.org/', './cloc' ]
18 verbose url resolved https://registry.npmjs.org/cloc
19 info trying registry request attempt 1 at 16:35:05
20 http GET https://registry.npmjs.org/cloc
21 http 200 https://registry.npmjs.org/cloc
22 silly registry.get cb [ 200,
22 silly registry.get   { server: 'nginx/1.10.1',
22 silly registry.get     'content-type': 'application/json',
22 silly registry.get     'last-modified': 'Sat, 27 May 2017 05:07:00 GMT',
22 silly registry.get     etag: '"59290974-9f27"',
22 silly registry.get     'cache-control': 'max-age=300',
22 silly registry.get     'content-length': '40743',
22 silly registry.get     'accept-ranges': 'bytes',
22 silly registry.get     date: 'Sat, 09 Sep 2017 06:35:12 GMT',
22 silly registry.get     via: '1.1 varnish',
22 silly registry.get     age: '0',
22 silly registry.get     connection: 'keep-alive',
22 silly registry.get     'x-served-by': 'cache-sea1020-SEA',
22 silly registry.get     'x-cache': 'MISS',
22 silly registry.get     'x-cache-hits': '0',
22 silly registry.get     'x-timer': 'S1504938912.392868,VS0,VE18',
22 silly registry.get     vary: 'Accept-Encoding, Accept' } ]
23 silly addNameRange number 2 { name: 'cloc', range: '*', hasData: true }
24 silly addNameRange versions [ 'cloc',
24 silly addNameRange   [ '1.0.0-beta.0',
24 silly addNameRange     '1.0.0-beta.1',
24 silly addNameRange     '1.0.0',
24 silly addNameRange     '1.0.1',
24 silly addNameRange     '1.0.2',
24 silly addNameRange     '1.0.3',
24 silly addNameRange     '1.0.4',
24 silly addNameRange     '2.0.0',
24 silly addNameRange     '2.1.0',
24 silly addNameRange     '2.2.0' ] ]
25 verbose addNamed [ 'cloc', '2.2.0' ]
26 verbose addNamed [ '2.2.0', '2.2.0' ]
27 silly lockFile 93827a61-cloc-2-2-0 cloc@2.2.0
28 verbose lock cloc@2.2.0 /home/nightietime/.npm/93827a61-cloc-2-2-0.lock
29 silly lockFile 59685312-ry-npmjs-org-cloc-cloc-2-2-0-tgz https://registry.npmjs.org/cloc/-/cloc-2.2.0.tgz
30 verbose lock https://registry.npmjs.org/cloc/-/cloc-2.2.0.tgz /home/nightietime/.npm/59685312-ry-npmjs-org-cloc-cloc-2-2-0-tgz.lock
31 verbose addRemoteTarball [ 'https://registry.npmjs.org/cloc/-/cloc-2.2.0.tgz',
31 verbose addRemoteTarball   'ee38e476fd050edc1d2ef8357cbde274b7c7efb4' ]
32 info retry fetch attempt 1 at 16:35:06
33 verbose fetch to= /home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/tmp.tgz
34 http GET https://registry.npmjs.org/cloc/-/cloc-2.2.0.tgz
35 http 200 https://registry.npmjs.org/cloc/-/cloc-2.2.0.tgz
36 verbose tar unpack /home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/tmp.tgz
37 silly lockFile aed82547-06830-0-7122816471382976-package tar:///home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/package
38 verbose lock tar:///home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/package /home/nightietime/.npm/aed82547-06830-0-7122816471382976-package.lock
39 silly lockFile ea16f357-06830-0-7122816471382976-tmp-tgz tar:///home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/tmp.tgz
40 verbose lock tar:///home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/tmp.tgz /home/nightietime/.npm/ea16f357-06830-0-7122816471382976-tmp-tgz.lock
41 silly gunzTarPerm modes [ '755', '644' ]
42 silly gunzTarPerm extractEntry package.json
43 silly gunzTarPerm extractEntry .npmignore
44 silly gunzTarPerm extractEntry README.md
45 silly gunzTarPerm extractEntry .travis.yml
46 silly gunzTarPerm extractEntry lib/cloc
47 silly gunzTarPerm extractEntry other/screenshot.png
48 silly lockFile aed82547-06830-0-7122816471382976-package tar:///home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/package
49 silly lockFile aed82547-06830-0-7122816471382976-package tar:///home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/package
50 silly lockFile ea16f357-06830-0-7122816471382976-tmp-tgz tar:///home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/tmp.tgz
51 silly lockFile ea16f357-06830-0-7122816471382976-tmp-tgz tar:///home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/tmp.tgz
52 verbose tar pack [ '/home/nightietime/.npm/cloc/2.2.0/package.tgz',
52 verbose tar pack   '/home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/package' ]
53 verbose tarball /home/nightietime/.npm/cloc/2.2.0/package.tgz
54 verbose folder /home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/package
55 silly lockFile aed82547-06830-0-7122816471382976-package tar:///home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/package
56 verbose lock tar:///home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/package /home/nightietime/.npm/aed82547-06830-0-7122816471382976-package.lock
57 silly lockFile 00f5d3a8-etime-npm-cloc-2-2-0-package-tgz tar:///home/nightietime/.npm/cloc/2.2.0/package.tgz
58 verbose lock tar:///home/nightietime/.npm/cloc/2.2.0/package.tgz /home/nightietime/.npm/00f5d3a8-etime-npm-cloc-2-2-0-package-tgz.lock
59 silly lockFile aed82547-06830-0-7122816471382976-package tar:///home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/package
60 silly lockFile aed82547-06830-0-7122816471382976-package tar:///home/nightietime/tmp/npm-165-oqKLpnTB/1504938906830-0.7122816471382976/package
61 silly lockFile 00f5d3a8-etime-npm-cloc-2-2-0-package-tgz tar:///home/nightietime/.npm/cloc/2.2.0/package.tgz
62 silly lockFile 00f5d3a8-etime-npm-cloc-2-2-0-package-tgz tar:///home/nightietime/.npm/cloc/2.2.0/package.tgz
63 silly lockFile c4d0f041-ghtietime-npm-cloc-2-2-0-package /home/nightietime/.npm/cloc/2.2.0/package
64 verbose lock /home/nightietime/.npm/cloc/2.2.0/package /home/nightietime/.npm/c4d0f041-ghtietime-npm-cloc-2-2-0-package.lock
65 silly lockFile c4d0f041-ghtietime-npm-cloc-2-2-0-package /home/nightietime/.npm/cloc/2.2.0/package
66 silly lockFile c4d0f041-ghtietime-npm-cloc-2-2-0-package /home/nightietime/.npm/cloc/2.2.0/package
67 verbose tar unpack /home/nightietime/.npm/cloc/2.2.0/package.tgz
68 silly lockFile 2366e2bc-ghtietime-npm-cloc-2-2-0-package tar:///home/nightietime/.npm/cloc/2.2.0/package
69 verbose lock tar:///home/nightietime/.npm/cloc/2.2.0/package /home/nightietime/.npm/2366e2bc-ghtietime-npm-cloc-2-2-0-package.lock
70 silly lockFile 00f5d3a8-etime-npm-cloc-2-2-0-package-tgz tar:///home/nightietime/.npm/cloc/2.2.0/package.tgz
71 verbose lock tar:///home/nightietime/.npm/cloc/2.2.0/package.tgz /home/nightietime/.npm/00f5d3a8-etime-npm-cloc-2-2-0-package-tgz.lock
72 silly gunzTarPerm modes [ '755', '644' ]
73 silly gunzTarPerm extractEntry package.json
74 silly gunzTarPerm extractEntry .npmignore
75 silly gunzTarPerm extractEntry README.md
76 silly gunzTarPerm extractEntry .travis.yml
77 silly gunzTarPerm extractEntry lib/cloc
78 silly gunzTarPerm extractEntry other/screenshot.png
79 silly lockFile 2366e2bc-ghtietime-npm-cloc-2-2-0-package tar:///home/nightietime/.npm/cloc/2.2.0/package
80 silly lockFile 2366e2bc-ghtietime-npm-cloc-2-2-0-package tar:///home/nightietime/.npm/cloc/2.2.0/package
81 silly lockFile 00f5d3a8-etime-npm-cloc-2-2-0-package-tgz tar:///home/nightietime/.npm/cloc/2.2.0/package.tgz
82 silly lockFile 00f5d3a8-etime-npm-cloc-2-2-0-package-tgz tar:///home/nightietime/.npm/cloc/2.2.0/package.tgz
83 verbose chmod /home/nightietime/.npm/cloc/2.2.0/package.tgz 644
84 verbose chown /home/nightietime/.npm/cloc/2.2.0/package.tgz [ 1000, 1000 ]
85 silly lockFile 59685312-ry-npmjs-org-cloc-cloc-2-2-0-tgz https://registry.npmjs.org/cloc/-/cloc-2.2.0.tgz
86 silly lockFile 59685312-ry-npmjs-org-cloc-cloc-2-2-0-tgz https://registry.npmjs.org/cloc/-/cloc-2.2.0.tgz
87 silly lockFile 93827a61-cloc-2-2-0 cloc@2.2.0
88 silly lockFile 93827a61-cloc-2-2-0 cloc@2.2.0
89 silly lockFile bc15718c-cloc cloc@
90 silly lockFile bc15718c-cloc cloc@
91 silly resolved [ { name: 'cloc',
91 silly resolved     version: '2.2.0',
91 silly resolved     description: 'An npm module for distributing cloc by Al Danial http://cloc.sourceforge.net/',
91 silly resolved     main: 'lib/cloc',
91 silly resolved     scripts:
91 silly resolved      { test: 'echo "Error: no test specified"',
91 silly resolved        'semantic-release': 'semantic-release pre && npm publish && semantic-release post' },
91 silly resolved     bin: { cloc: 'lib/cloc' },
91 silly resolved     repository: { type: 'git', url: 'https://github.com/kentcdodds/cloc.git' },
91 silly resolved     keywords: [ 'cloc', 'count lines of code', 'lines of code', 'loc' ],
91 silly resolved     author:
91 silly resolved      { name: 'Kent C. Dodds',
91 silly resolved        email: 'kent@doddsfamily.us',
91 silly resolved        url: 'http://kentcdodds.com' },
91 silly resolved     license: 'GPL-2.0',
91 silly resolved     bugs: { url: 'https://github.com/kentcdodds/cloc/issues' },
91 silly resolved     homepage: 'https://github.com/kentcdodds/cloc#readme',
91 silly resolved     devDependencies: { 'semantic-release': '^6.3.2' },
91 silly resolved     readme: '# cloc\n\n![Screenshot](other/screenshot.png)\n\nThis is just an npm distribution of the amazing [cloc](https://github.com/AlDanial/cloc) by [Al Danial](pontifespresso).\n[I](https://twitter.com/kentcdodds) created this package because I think `cloc` is awesome, but didn\'t want to download\nthe file and commit it to my project.\n\n\n# Installation and Requirements\n\n## Requirements\n\n### Perl\n\n`cloc` is written in perl and the binary that this package exposes is the `cloc` perl script. You must have perl installed on your machine for this binary to work.\n\n### Node & npm\n\nThis is distributed as an `npm` package (some say that stands for "Node Package Manager"). So you must have Node.js and npm installed.\n \nHere are quick instructions on how to get those: http://blog.nodeknockout.com/post/65463770933/how-to-install-node-js-and-npm\n\nCongratulations, you\'ve opened your life to a whole new world of awesome tooling and other cool things :-)\n\n## Installation\n\nInstall this tool via `npm`: `$ npm install -g cloc`\n\n# Usage\n\nIn your terminal, simply type `cloc` to get output of the options available.\n\nSee the official [cloc](http://cloc.sourceforge.net/) website for documentation on how to use `cloc`.\n\nHere\'s the output when you type `cloc`:\n\n```\nUsage: cloc [options] <file(s)/dir(s)> | <set 1> <set 2> | <report files>\n\n Count, or compute differences of, physical lines of source code in the\n given files (may be archives such as compressed tarballs or zip files)\n and/or recursively below the given directories.\n\n Input Options\n   --extract-with=<cmd>      This option is only needed if cloc is unable\n                             to figure out how to extract the contents of\n                             the input file(s) by itself.\n                             Use <cmd> to extract binary archive files (e.g.:\n                             .tar.gz, .zip, .Z).  Use the literal \'>FILE<\' as\n                             a stand-in for the actual file(s) to be\n                             extracted.  For example, to count lines of code\n                             in the input files\n                                gcc-4.2.tar.gz  perl-5.8.8.tar.gz\n                             on Unix use\n                               --extract-with=\'gzip -dc >FILE< | tar xf -\'\n                             or, if you have GNU tar,\n                               --extract-with=\'tar zxf >FILE<\'\n                             and on Windows use, for example:\n                               --extract-with="\\"c:\\Program Files\\WinZip\\WinZip32.exe\\" -e -o >FILE< ."\n                             (if WinZip is installed there).\n   --list-file=<file>        Take the list of file and/or directory names to\n                             process from <file>, which has one file/directory\n                             name per line.  Only exact matches are counted;\n                             relative path names will be resolved starting from\n                             the directory where cloc is invoked.\n                             See also --exclude-list-file.\n   --vcs=<VCS>               Invoke a system call to <VCS> to obtain a list of\n                             files to work on.  If <VCS> is \'git\', then will\n                             invoke \'git ls-files\' to get a file list and\n                             \'git submodule status\' to get a list of submodules\n                             whose contents will be ignored.  If <VCS> is \'svn\'\n                             then will invoke \'svn list -R\'.  The primary benefit\n                             is that cloc will then skip files explicitly\n                             excluded by the versioning tool in question,\n                             ie, those in .gitignore or have the svn:ignore\n                             property.\n                             Alternatively <VCS> may be any system command\n                             that generates a list of files.\n                             Note:  cloc must be in a directory which can read\n                             the files as they are returned by <VCS>.  cloc will\n                             not download files from remote repositories.\n                             \'svn list -R\' may refer to a remote repository\n                             to obtain file names (and therefore may require\n                             authentication to the remote repository), but\n                             the files themselves must be local.\n   --unicode                 Check binary files to see if they contain Unicode\n                             expanded ASCII text.  This causes performance to\n                             drop noticeably.\n\n Processing Options\n   --autoconf                Count .in files (as processed by GNU autoconf) of\n                             recognized languages.\n   --by-file                 Report results for every source file encountered.\n   --by-file-by-lang         Report results for every source file encountered\n                             in addition to reporting by language.\n   --count-and-diff <set1> <set2>\n                             First perform direct code counts of source file(s)\n                             of <set1> and <set2> separately, then perform a diff\n                             of these.  Inputs may be pairs of files, directories,\n                             or archives.  See also --diff, --diff-alignment,\n                             --diff-timeout, --ignore-case, --ignore-whitespace.\n   --diff <set1> <set2>      Compute differences in code and comments between\n                             source file(s) of <set1> and <set2>.  The inputs\n                             may be pairs of files, directories, or archives.\n                             Use --diff-alignment to generate a list showing\n                             which file pairs where compared.  See also\n                             --count-and-diff, --diff-alignment, --diff-timeout,\n                             --ignore-case, --ignore-whitespace.\n   --diff-timeout <N>        Ignore files which take more than <N> seconds\n                             to process.  Default is 10 seconds.\n                             (Large files with many repeated lines can cause\n                             Algorithm::Diff::sdiff() to take hours.)\n   --follow-links            [Unix only] Follow symbolic links to directories\n                             (sym links to files are always followed).\n   --force-lang=<lang>[,<ext>]\n                             Process all files that have a <ext> extension\n                             with the counter for language <lang>.  For\n                             example, to count all .f files with the\n                             Fortran 90 counter (which expects files to\n                             end with .f90) instead of the default Fortran 77\n                             counter, use\n                               --force-lang="Fortran 90",f\n                             If <ext> is omitted, every file will be counted\n                             with the <lang> counter.  This option can be\n                             specified multiple times (but that is only\n                             useful when <ext> is given each time).\n                             See also --script-lang, --lang-no-ext.\n   --force-lang-def=<file>   Load language processing filters from <file>,\n                             then use these filters instead of the built-in\n                             filters.  Note:  languages which map to the same\n                             file extension (for example:\n                             MATLAB/Mathematica/Objective C/MUMPS/Mercury;\n                             Pascal/PHP; Lisp/OpenCL; Lisp/Julia; Perl/Prolog)\n                             will be ignored as these require additional\n                             processing that is not expressed in language\n                             definition files.  Use --read-lang-def to define\n                             new language filters without replacing built-in\n                             filters (see also --write-lang-def).\n   --ignore-whitespace       Ignore horizontal white space when comparing files\n                             with --diff.  See also --ignore-case.\n   --ignore-case             Ignore changes in case; consider upper- and lower-\n                             case letters equivalent when comparing files with\n                             --diff.  See also --ignore-whitespace.\n   --lang-no-ext=<lang>      Count files without extensions using the <lang>\n                             counter.  This option overrides internal logic\n                             for files without extensions (where such files\n                             are checked against known scripting languages\n                             by examining the first line for #!).  See also\n                             --force-lang, --script-lang.\n   --max-file-size=<MB>      Skip files larger than <MB> megabytes when\n                             traversing directories.  By default, <MB>=100.\n                             cloc\'s memory requirement is roughly twenty times\n                             larger than the largest file so running with\n                             files larger than 100 MB on a computer with less\n                             than 2 GB of memory will cause problems.\n                             Note:  this check does not apply to files\n                             explicitly passed as command line arguments.\n   --original-dir            [Only effective in combination with\n                             --strip-comments]  Write the stripped files\n                             to the same directory as the original files.\n   --read-binary-files       Process binary files in addition to text files.\n                             This is usually a bad idea and should only be\n                             attempted with text files that have embedded\n                             binary data.\n   --read-lang-def=<file>    Load new language processing filters from <file>\n                             and merge them with those already known to cloc.\n                             If <file> defines a language cloc already knows\n                             about, cloc\'s definition will take precedence.\n                             Use --force-lang-def to over-ride cloc\'s\n                             definitions (see also --write-lang-def ).\n   --script-lang=<lang>,<s>  Process all files that invoke <s> as a #!\n                             scripting language with the counter for language\n                             <lang>.  For example, files that begin with\n                                #!/usr/local/bin/perl5.8.8\n                             will be counted with the Perl counter by using\n                                --script-lang=Perl,perl5.8.8\n                             The language name is case insensitive but the\n                             name of the script language executable, <s>,\n                             must have the right case.  This option can be\n                             specified multiple times.  See also --force-lang,\n                             --lang-no-ext.\n   --sdir=<dir>              Use <dir> as the scratch directory instead of\n                             letting File::Temp chose the location.  Files\n                             written to this location are not removed at\n                             the end of the run (as they are with File::Temp).\n   --skip-uniqueness         Skip the file uniqueness check.  This will give\n                             a performance boost at the expense of counting\n                             files with identical contents multiple times\n                             (if such duplicates exist).\n   --stdin-name=<file>       Give a file name to use to determine the language\n                             for standard input.  (Use - as the input name to\n                             receive source code via STDIN.)\n   --strip-comments=<ext>    For each file processed, write to the current\n                             directory a version of the file which has blank\n                             lines and comments removed.  The name of each\n                             stripped file is the original file name with\n                             .<ext> appended to it.  It is written to the\n                             current directory unless --original-dir is on.\n   --sum-reports             Input arguments are report files previously\n                             created with the --report-file option.  Makes\n                             a cumulative set of results containing the\n                             sum of data from the individual report files.\n   --unix                    Override the operating system autodetection\n                             logic and run in UNIX mode.  See also\n                             --windows, --show-os.\n   --use-sloccount           If SLOCCount is installed, use its compiled\n                             executables c_count, java_count, pascal_count,\n                             php_count, and xml_count instead of cloc\'s\n                             counters.  SLOCCount\'s compiled counters are\n                             substantially faster than cloc\'s and may give\n                             a performance improvement when counting projects\n                             with large files.  However, these cloc-specific\n                             features will not be available: --diff,\n                             --count-and-diff, --strip-comments, --unicode.\n   --windows                 Override the operating system autodetection\n                             logic and run in Microsoft Windows mode.\n                             See also --unix, --show-os.\n\n Filter Options\n   --exclude-dir=<D1>[,D2,]  Exclude the given comma separated directories\n                             D1, D2, D3, et cetera, from being scanned.  For\n                             example  --exclude-dir=.cache,test  will skip\n                             all files and subdirectories that have /.cache/\n                             or /test/ as their parent directory.\n                             Directories named .bzr, .cvs, .hg, .git, and\n                             .svn are always excluded.\n                             This option only works with individual directory\n                             names so including file path separators is not\n                             allowed.  Use --fullpath and --not-match-d=<regex>\n                             to supply a regex matching multiple subdirectories.\n   --exclude-ext=<ext1>[,<ext2>[...]]\n                             Do not count files having the given file name\n                             extensions.\n   --exclude-lang=<L1>[,L2,] Exclude the given comma separated languages\n                             L1, L2, L3, et cetera, from being counted.\n   --exclude-list-file=<file>  Ignore files and/or directories whose names\n                             appear in <file>.  <file> should have one file\n                             name per line.  Only exact matches are ignored;\n                             relative path names will be resolved starting from\n                             the directory where cloc is invoked.\n                             See also --list-file.\n   --fullpath                Modifies the behavior of --match-f, --not-match-f,\n                             and --not-match-d to include the file\'s path\n                             in the regex, not just the file\'s basename.\n                             (This does not expand each file to include its\n                             absolute path, instead it uses as much of\n                             the path as is passed in to cloc.)\n                             Note:  --match-d always looks at the full\n                             path and therefore is unaffected by --fullpath.\n   --include-lang=<L1>[,L2,] Count only the given comma separated languages\n                             L1, L2, L3, et cetera.\n   --match-d=<regex>         Only count files in directories matching the Perl\n                             regex.  For example\n                               --match-d=\'/(src|include)/\'\n                             only counts files in directories containing\n                             /src/ or /include/.  Unlike --not-match-d,\n                             --match-f, and --not-match-f, --match-d always\n                             compares the fully qualified path against the regex.\n   --not-match-d=<regex>     Count all files except those in directories\n                             matching the Perl regex.  Only the trailing\n                             directory name is compared, for example, when\n                             counting in /usr/local/lib, only \'lib\' is\n                             compared to the regex.\n                             Add --fullpath to compare parent directories to\n                             the regex.\n                             Do not include file path separators at the beginning\n                             or end of the regex.\n   --match-f=<regex>         Only count files whose basenames match the Perl\n                             regex.  For example\n                               --match-f=\'^[Ww]idget\'\n                             only counts files that start with Widget or widget.\n                             Add --fullpath to include parent directories\n                             in the regex instead of just the basename.\n   --not-match-f=<regex>     Count all files except those whose basenames\n                             match the Perl regex.  Add --fullpath to include\n                             parent directories in the regex instead of just\n                             the basename.\n   --skip-archive=<regex>    Ignore files that end with the given Perl regular\n                             expression.  For example, if given\n                               --skip-archive=\'(zip|tar(.(gz|Z|bz2|xz|7z))?)\'\n                             the code will skip files that end with .zip,\n                             .tar, .tar.gz, .tar.Z, .tar.bz2, .tar.xz, and\n                             .tar.7z.\n   --skip-win-hidden         On Windows, ignore hidden files.\n\n Debug Options\n   --categorized=<file>      Save names of categorized files to <file>.\n   --counted=<file>          Save names of processed source files to <file>.\n   --diff-alignment=<file>   Write to <file> a list of files and file pairs\n                             showing which files were added, removed, and/or\n                             compared during a run with --diff.  This switch\n                             forces the --diff mode on.\n   --explain=<lang>          Print the filters used to remove comments for\n                             language <lang> and exit.  In some cases the\n                             filters refer to Perl subroutines rather than\n                             regular expressions.  An examination of the\n                             source code may be needed for further explanation.\n   --help                    Print this usage information and exit.\n   --found=<file>            Save names of every file found to <file>.\n   --ignored=<file>          Save names of ignored files and the reason they\n                             were ignored to <file>.\n   --print-filter-stages     Print processed source code before and after\n                             each filter is applied.\n   --show-ext[=<ext>]        Print information about all known (or just the\n                             given) file extensions and exit.\n   --show-lang[=<lang>]      Print information about all known (or just the\n                             given) languages and exit.\n   --show-os                 Print the value of the operating system mode\n                             and exit.  See also --unix, --windows.\n   -v[=<n>]                  Verbose switch (optional numeric value).\n   -verbose[=<n>]            Long form of -v.\n   --version                 Print the version of this program and exit.\n   --write-lang-def=<file>   Writes to <file> the language processing filters\n                             then exits.  Useful as a first step to creating\n                             custom language definitions (see also\n                             --force-lang-def, --read-lang-def).\n\n Output Options\n   --3                       Print third-generation language output.\n                             (This option can cause report summation to fail\n                             if some reports were produced with this option\n                             while others were produced without it.)\n   --by-percent  X           Instead of comment and blank line counts, show\n                             these values as percentages based on the value\n                             of X in the denominator:\n                                X = \'c\'   -> # lines of code\n                                X = \'cm\'  -> # lines of code + comments\n                                X = \'cb\'  -> # lines of code + blanks\n                                X = \'cmb\' -> # lines of code + comments + blanks\n                             For example, if using method \'c\' and your code\n                             has twice as many lines of comments as lines\n                             of code, the value in the comment column will\n                             be 200%.  The code column remains a line count.\n   --csv                     Write the results as comma separated values.\n   --csv-delimiter=<C>       Use the character <C> as the delimiter for comma\n                             separated files instead of ,.  This switch forces\n   --json                    Write the results as JavaScript Object Notation\n                             (JSON) formatted output.\n   --md                      Write the results as Markdown-formatted text.\n   --out=<file>              Synonym for --report-file=<file>.\n   --progress-rate=<n>       Show progress update after every <n> files are\n                             processed (default <n>=100).  Set <n> to 0 to\n                             suppress progress output (useful when redirecting\n                             output to STDOUT).\n   --quiet                   Suppress all information messages except for\n                             the final report.\n   --report-file=<file>      Write the results to <file> instead of STDOUT.\n   --sql=<file>              Write results as SQL create and insert statements\n                             which can be read by a database program such as\n                             SQLite.  If <file> is -, output is sent to STDOUT.\n   --sql-append              Append SQL insert statements to the file specified\n                             by --sql and do not generate table creation\n                             statements.  Only valid with the --sql option.\n   --sql-project=<name>      Use <name> as the project identifier for the\n                             current run.  Only valid with the --sql option.\n   --sql-style=<style>       Write SQL statements in the given style instead\n                             of the default SQLite format.  Currently, the\n                             only style option is Oracle.\n   --sum-one                 For plain text reports, show the SUM: output line\n                             even if only one input file is processed.\n   --xml                     Write the results in XML.\n   --xsl=<file>              Reference <file> as an XSL stylesheet within\n                             the XML output.  If <file> is 1 (numeric one),\n                             writes a default stylesheet, cloc.xsl (or\n                             cloc-diff.xsl if --diff is also given).\n                             This switch forces --xml on.\n   --yaml                    Write the results in YAML.\n```\n\n## Locally in a project\n\nI use this in my project to keep track of my lines of code as the project grows (mostly for fun). Here\'s what I do:\n\n1. Install it as one of your `devDependencies` with `$ npm i -D cloc`\n2. Add this to your `package.json`:\n\n```javascript\n{\n  // your other config stuff\n  "scripts": {\n    "count": "cloc app/" // <-- other options would go here as well...\n  },\n  "devDependencies": {\n    "cloc": "2.0.0" // <-- this should be added automatically when you install with the `-D` flag\n  }\n  // more config stuff\n}\n```\n\n3. Whenever you want to count your lines of code, simply enter: `$ npm run count`\n\n# LICENSE\n\nThis package is and the `cloc` cli itself is licensed with GPL 2.\n\n',
91 silly resolved     readmeFilename: 'README.md',
91 silly resolved     _id: 'cloc@2.2.0',
91 silly resolved     dist: { shasum: 'ee38e476fd050edc1d2ef8357cbde274b7c7efb4' },
91 silly resolved     _from: 'cloc@',
91 silly resolved     _resolved: 'https://registry.npmjs.org/cloc/-/cloc-2.2.0.tgz' } ]
92 info install cloc@2.2.0 into /usr/local/lib
93 info installOne cloc@2.2.0
94 info /usr/local/lib/node_modules/cloc unbuild
95 verbose tar unpack /home/nightietime/.npm/cloc/2.2.0/package.tgz
96 silly lockFile 9de9022f--usr-local-lib-node-modules-cloc tar:///usr/local/lib/node_modules/cloc
97 verbose lock tar:///usr/local/lib/node_modules/cloc /home/nightietime/.npm/9de9022f--usr-local-lib-node-modules-cloc.lock
98 silly lockFile 00f5d3a8-etime-npm-cloc-2-2-0-package-tgz tar:///home/nightietime/.npm/cloc/2.2.0/package.tgz
99 verbose lock tar:///home/nightietime/.npm/cloc/2.2.0/package.tgz /home/nightietime/.npm/00f5d3a8-etime-npm-cloc-2-2-0-package-tgz.lock
100 silly gunzTarPerm modes [ '755', '644' ]
101 error Error: EACCES, mkdir '/usr/local/lib/node_modules'
101 error  { [Error: EACCES, mkdir '/usr/local/lib/node_modules']
101 error   errno: 3,
101 error   code: 'EACCES',
101 error   path: '/usr/local/lib/node_modules',
101 error   fstream_type: 'Directory',
101 error   fstream_path: '/usr/local/lib/node_modules/cloc',
101 error   fstream_class: 'DirWriter',
101 error   fstream_stack:
101 error    [ '/usr/lib/nodejs/fstream/lib/writer.js:171:23',
101 error      '/usr/lib/nodejs/mkdirp/index.js:37:53',
101 error      'Object.oncomplete (fs.js:107:15)' ] }
102 error Please try running this command again as root/Administrator.
103 error System Linux 4.4.0-43-Microsoft
104 error command "/usr/bin/nodejs" "/usr/bin/npm" "install" "-g" "cloc"
105 error cwd /mnt/d/Projects/radAR/oxygen-comp30022
106 error node -v v0.10.25
107 error npm -v 1.3.10
108 error path /usr/local/lib/node_modules
109 error fstream_path /usr/local/lib/node_modules/cloc
110 error fstream_type Directory
111 error fstream_class DirWriter
112 error code EACCES
113 error errno 3
114 error stack Error: EACCES, mkdir '/usr/local/lib/node_modules'
115 error fstream_stack /usr/lib/nodejs/fstream/lib/writer.js:171:23
115 error fstream_stack /usr/lib/nodejs/mkdirp/index.js:37:53
115 error fstream_stack Object.oncomplete (fs.js:107:15)
116 verbose exit [ 3, true ]
